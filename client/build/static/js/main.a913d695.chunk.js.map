{"version":3,"sources":["Home.js","Lambda.js","App.js","serviceWorker.js","index.js"],"names":["Home","componentDidMount","window","location","href","style","align","Component","Lambda","props","handleAxios","setState","showButton","axios","get","then","response","console","log","data","info","catch","error","state","params","queryString","parse","this","search","code","headers","result","access_token","onClick","React","App","requestProfile","to","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0RAsBeA,E,4MAjBbC,kBAAkB,WAIVC,OAAOC,SAASC,KAAhB,UAFU,+O,uDAOV,OACI,yBAAKC,MAAO,CAACC,MAAM,WACrB,uD,GAbOC,a,iBCsDJC,E,kDArDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IA4BRC,YAAY,WACR,EAAKC,SAAS,CAACC,YAAW,IAC5BC,IAAMC,IAAI,uEACTC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACXA,EAASG,MACV,EAAKR,SAAS,CAACS,KAAK,oDAAoDR,YAAW,OAGtFS,OAAM,SAACC,GACNL,QAAQC,IAAII,GACZ,EAAKX,SAAS,CAACS,KAAK,2CAA2CR,YAAW,QAtC5E,EAAKW,MAAM,CACPH,KAAK,UACLR,YAAW,GAJD,E,gEAQI,IAAD,OACbY,EAASC,IAAYC,MAAMC,KAAKlB,MAAMN,SAASyB,QACnDX,QAAQC,IAAIM,EAAOK,MACpBhB,IAAMC,IAAN,+EAAkFU,EAAOK,MAAO,GAAG,CAClGC,QAAU,CACf,eAAgB,2BAGXf,MAAK,SAACC,GACDA,EAASG,KAAKY,OAAOC,aACpB,EAAKrB,SAAS,CAACS,KAAK,0BAA0BR,YAAW,IAGzD,EAAKD,SAAS,CAACS,KAAK,0CAG1BC,OAAM,SAACC,GACJL,QAAQC,IAAII,Q,+BAmBf,OACI,yBAAKjB,MAAO,CAACC,MAAM,WAChB,4BAAMqB,KAAKJ,MAAMH,MAChBO,KAAKJ,MAAMX,YAAc,4BAASqB,QAASN,KAAKjB,aAAvB,+B,GAhDpBwB,IAAM3B,WCgCZ4B,E,4MAtBbC,eAAiB,WAGblC,OAAOC,SAASC,KAAhB,UAFU,+O,uDAQZ,OAEI,kBAAC,IAAD,KACF,kBAAC,IAAD,CAAMiC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,SAASE,UAAWhC,S,GArBtB0B,IAAM3B,WCKJkC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMgC,c","file":"static/js/main.a913d695.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\n\nclass Home extends Component {\n \n  componentDidMount=()=>{\n      \n        var oauthUrl = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=81gad30pe28yok&redirect_uri=https://master.dfhwi69jafa7m.amplifyapp.com/auth&state=0.06018782529263844&scope=r_liteprofile%20r_emailaddress%20w_member_social`\n        \n          window.location.href=`${oauthUrl}`\n        \n    }\n\n      render(){\n          return(\n              <div style={{align:'center'}}>\n            <button  >LinkedIn Login</button>\n            \n            </div>\n          )\n      }\n}\nexport default Home","import React from \"react\";\nimport queryString from 'query-string';\nimport axios from 'axios'\nclass Lambda extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            info:'loading',\n            showButton:false\n        }\n      }\n\n      componentDidMount(){\n        let params = queryString.parse(this.props.location.search)\n        console.log(params.code)\n       axios.get(`https://zhpt499mlb.execute-api.us-east-1.amazonaws.com/dev/api/token/${params.code}`,'',{\n        headers : {\n\t\t\t\"Content-Type\": \"x-www-form-urlencoded\"\n\t\t}\n       })\n       .then((response)=>{\n          if(response.data.result.access_token){\n              this.setState({info:\"You can close this page\",showButton:true})\n          }\n          else{\n              this.setState({info:\"something went wrong contact admin\"})\n          }\n       })\n       .catch((error)=>{\n           console.log(error)\n       })\n        \n      }  \n      handleAxios=()=>{\n          this.setState({showButton:false})\n        axios.get('https://zhpt499mlb.execute-api.us-east-1.amazonaws.com/dev/api/info')\n        .then((response)=>{\n            console.log(response)\n          if(response.data){\n            this.setState({info:'Your Post is Successfull, You can close this page',showButton:false})\n          }\n        })\n        .catch((error)=>{\n          console.log(error)\n          this.setState({info:'Your Post is NotSuccesful, Contact Admin',showButton:false})\n      })\n      }  \n    render(){\n        return(\n            <div style={{align:'center'}}>\n               <h1 >{this.state.info}</h1>\n               {this.state.showButton && <button  onClick={this.handleAxios}>Trigger Lambda To Post</button>}\n            </div>\n        )\n    }\n}\n\nexport default Lambda","\nimport React from \"react\";\nimport axios from 'axios'\nimport {BrowserRouter,Route,Link,Switch} from 'react-router-dom'\nimport Home from './Home'\nimport Lambda from './Lambda'\n\nclass App extends React.Component {\n\n\n \n  \n  \n  requestProfile = () => {\n    var oauthUrl = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=81gad30pe28yok&redirect_uri=https://master.dfhwi69jafa7m.amplifyapp.com/auth&state=0.06018782529263844&scope=r_liteprofile%20r_emailaddress%20w_member_social`\n    \n      window.location.href=`${oauthUrl}`\n    \n  };\n\n  render() {\n    let a=1;\n    return (\n      \n        <BrowserRouter>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/auth\">Auth</Link>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/auth/\" component={Lambda}/>\n        </BrowserRouter>\n     \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}